<?php

use LangLeap\Quizzes\Answer;
use LangLeap\Quizzes\Question;
use LangLeap\Quizzes\Quiz;
use LangLeap\Quizzes\VideoQuestion;
use LangLeap\QuizUtilities\QuizUtils;
use LangLeap\Videos\Video;

/**
 * @author Thomas Rahn <thomas@rahn.ca>
 * @author Alan Ly <hello@alan.ly>
 * @author Dror Ozgaon <Dror.Ozgaon@gmail.com>
 */
class ApiQuizController extends \BaseController {

	/**
	 * This function will generate a JSON response that contains the quiz
	 * 
	 * @return Response
	 */
	public function postIndex()
	{
		$quiz_id = Input::get('quiz_id');
		$quiz = Quiz::find($quiz_id);
		return $this->apiResponse(
			'success', $quiz->toResponseArray()
		);
	}

	/**
	 * This function will generate a json response that will contain, the quiz 
	 * ID of the quiz generated by POSTing the script words selected.
	 *
	 * @return Response
	 */
	public function postVideo()
	{
		$response = QuizUtils::createVideoQuiz(Auth::user(), Input::all());
		return $this->apiResponse(
			$response[0], $response[1], $response[2]
		);
	}

	/**
	 * This function will be used to answer a question. It will increase the
	 * users quiz score if he selected the proper answer.
	 * 
	 * @return Response
	 */
	public function putIndex()
	{
		$response = QuizUtils::answerQuizQuestion(Auth::user(), Input::all());
		return $this->apiResponse(
			$response[0], $response[1], $response[2]
		);
	}
	
	public function putCustomQuestion()
	{
		$video_id = Input::get('video_id');
		$question = Input::get('question');
		$answers = Input::get('answer');
		
		$message = 'Custom question saved successfully';
		$success = true;

		$video = Video::find($video_id);

		if (! $video)
		{
			$success = false;
			$message = 'Video not found in database';
		}
		
		if(! $question || ! $answers || count($answers) < 1)
		{
			$success = false;
			$message = 'Fields not filled in properly';
		}

		if($success) // Create the question if the input is correct
		{
			$question = Question::create([
				'question'  => $question,
				'answer_id' => -1
			]);
			
			// Shuffle the answers
			$answer_id = -1;
			while (count($answers) > 0)
			{
				$answer_key = array_rand($answers);

				$answer = Answer::create([
					'answer'      => $answers[$answer_key],
					'question_id' => $question->id
				]);

				if ($answer_key == 0)
				{
					$answer_id = $answer->id;
				}

				unset($answers[$answer_key]);
			}
			
			$question->answer_id = $answer_id;
			$question->save();
			
			$vq = VideoQuestion::create([
				'video_id'    => $video_id,
				'question_id' => $question->id,
				'is_custom'   => true
			]);
		}
		
		return Redirect::to('admin/quiz/new')
		               ->with('success', $success)
		               ->with('message', $message);
	}
	
	public function getScore($quiz_id)
	{
		$quiz = Quiz::find($quiz_id);
		if (! $quiz)
		{
			return $this->apiResponse('error', "Quiz {$quiz_id} not found", 404);
		}
		
		if ( ($quiz->user_id != Auth::user()->id) && (! Auth::user()->is_admin) )
		{
			return $this->apiResponse(
				'error',
				"Not authorized to view quiz {$quiz_id}",
				401
			);
		}
		
		return $this->apiResponse('success', ['score' => $quiz->score], 200);
	}
	
	public function getReminder()
	{	
		$response = QuizUtils::createReminderQuiz(Auth::user(), []);
		return $this->apiResponse(
			$response[0], $response[1], $response[2]
		);
	}

}
