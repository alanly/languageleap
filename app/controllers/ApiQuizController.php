<?php

use LangLeap\Quizzes\Answer;
use LangLeap\Questions\Question;
use LangLeap\Questions\CustomQuestion;
use LangLeap\Quizzes\Quiz;
use LangLeap\Quizzes\VideoQuestion;
use LangLeap\QuizUtilities\QuizUtils;
use LangLeap\Videos\Video;

/**
 * @author Thomas Rahn <thomas@rahn.ca>
 * @author Alan Ly <hello@alan.ly>
 * @author Dror Ozgaon <Dror.Ozgaon@gmail.com>
 */
class ApiQuizController extends \BaseController {

	/**
	 * This function will generate a JSON response that contains the quiz
	 * 
	 * @return Response
	 */
	public function postIndex()
	{
		$quiz_id = Input::get('quiz_id');
		$quiz = Quiz::find($quiz_id);
		return $this->apiResponse(
			'success', $quiz->toResponseArray()
		);
	}

	/**
	 * This function will generate a json response that will contain, the quiz 
	 * ID of the quiz generated by POSTing the script words selected.
	 *
	 * @return Response
	 */
	public function postVideo()
	{
		$response = QuizUtils::createVideoQuiz(Auth::user(), Input::all());
		return $this->apiResponse(
			$response[0], $response[1], $response[2]
		);
	}

	/**
	 * This function will be used to answer a question. It will increase the
	 * users quiz score if he selected the proper answer.
	 * 
	 * @return Response
	 */
	public function putIndex()
	{
		$response = QuizUtils::answerQuizQuestion(Auth::user(), Input::all());
		return $this->apiResponse(
			$response[0], $response[1], $response[2]
		);
	}
	
	public function putCustomQuestion()
	{
		return $this->apiResponse('error', Lang::get('controllers.quiz.blank-fields_error'), 400);
	}
	
	public function getCustomQuestions($video_id)
	{
		$data = VideoQuestion::where('video_id', '=', $video_id)->where('is_custom', '=', true)->get();
		$json = [];
		foreach($data as $vq)
		{
			array_push($json, $vq->toResponseArray());
		}
		return $this->apiResponse('success', $json);
	}
	
	public function deleteCustomQuestion($videoQuestion_id)
	{
		$vq = VideoQuestion::find($videoQuestion_id);
		if(!$vq)
		{
			return $this->apiResponse('error', Lang::get('controllers.question.question_error', ['question_id' => $videoQuestion_id]), 404);
		}
		
		$vq->delete();
		return $this->apiResponse('success', Lang::get('controllers.question.question_deletion', ['question_id' => $videoQuestion_id]), 200);
	}
	
	public function getScore($quiz_id)
	{
		$quiz = Quiz::find($quiz_id);
		if (! $quiz)
		{
			return $this->apiResponse('error', Lang::get('controllers.quiz.quiz_error', ['quiz_id' => $quiz_id]), 404);
		}
		
		if ( ($quiz->user_id != Auth::user()->id) && (! Auth::user()->is_admin) )
		{
			return $this->apiResponse(
				'error',
				Lang::get('controllers.quiz.quiz_no-auth', ['quiz_id' => $quiz_id]),
				401
			);
		}
		
		return $this->apiResponse('success', ['score' => $quiz->score], 200);
	}
	
	public function getReminder()
	{	
		$response = QuizUtils::createReminderQuiz(Auth::user(), []);
		return $this->apiResponse(
			$response[0], $response[1], $response[2]
		);
	}
	
	public function getVideoScores()
	{
		$quizzes = Quiz::select(\DB::raw('quizzes.id, quizzes.category_id, quizzes.category_type, MAX(quizzes.score) as score'))
							->where('quizzes.user_id', '=', Auth::user()->id)->where('quizzes.category_type', '=', 'LangLeap\Quizzes\VideoQuiz')
							->join('video_quizzes', 'quizzes.category_id', '=', 'video_quizzes.id')->groupBy('video_quizzes.video_id')
							->get();
		
		$data = [];
		foreach($quizzes as $quiz)
		{
			$video = $quiz->category->video;
			$viewable = $video->viewable;
			
			array_push($data, [
				'title' => $viewable->name,
				'description' => $viewable->description,
				'link' => '/video/play/' . $video->id, 
				'score' => $quiz->score
			]);
		}
		
		return $this->apiResponse(
			'success', $data, 200
		);
	}

}
